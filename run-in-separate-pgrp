#!/usr/bin/env perl
#
# A wrapper tool which launches an arbitrary command in a newly created
# foreground process group. This allows to limit the scope of Ctrl-C SIGINT
# propagation to only the hierarchy of that new process group (terminals
# propagate SIGINT to ALL processes of a foreground process group when Ctrl-C is
# pressed, which may kill some intermediate processes like yarn).
#
# As an example, it's a work-around to let psql run in a yarn script (yarn dies
# on SIGINT).
#
# See details here:
# - https://www.postgresql.org/message-id/flat/271520.1713052173%40sss.pgh.pa.us#6ebc31cdb0365b0de9e0a2e7e5cb2268
# - https://www.cons.org/cracauer/sigint.html
#
use POSIX qw(tcgetpgrp tcsetpgrp WIFEXITED WEXITSTATUS WIFSIGNALED WTERMSIG);

if (!@ARGV) {
  die("Usage: $0 command [args...]\n");
}

pipe(READER, WRITER) or die("pipe: $!\n");

my $pid = fork();

if (!defined($pid)) {
  # Out of memory?
  die("fork: $!\n");
} elsif ($pid == 0) {
  # Child process.
  close(READER);
  # The machinery: child process calls setpgrp(), but it can't call tcsetpgrp()
  # since it must be done from the foreground process group (and after setpgrp()
  # ends, the current pid's process group is not foreground anymore).
  setpgrp($$, $$) or die("setpgrp: $!\n");
  # Message the parent that it can now call tcsetpgrp() to make this child's new
  # process group foreground.
  syswrite(WRITER, "1");
  close(WRITER);
  # Replace our own process with the command's process.
  exec(@ARGV) or die("exec: $!\n");
} else {
  # Parent process.
  close(WRITER);
  # Wait for the child process to finish the setpgrp() call.
  sysread(READER, my $buf, 1);
  close(READER);
  # Assign the child's process group as foreground for the terminal, if there is
  # terminal associated to STDIN, and the current process group is foreground.
  if (-t STDIN && tcgetpgrp(STDIN) == getpgrp(0)) {
    tcsetpgrp(STDIN, $pid) or die("tcsetpgrp $pid: $!\n");
  }
  # It's important to properly propagate the exit code and signal to the caller.
  # I.e. if the wrapped command was killed with SIGTERM, the wrapper will also
  # show itself terminated with SIGTERM.
  wait();
  my $code = ${^CHILD_ERROR_NATIVE};
  if (WIFEXITED($code)) {
    exit(WEXITSTATUS($code));
  }
  if (WIFSIGNALED($code)) {
    kill(WTERMSIG($code), $$); # kill self with the same signal
  }
  exit($code >> 8);
}
